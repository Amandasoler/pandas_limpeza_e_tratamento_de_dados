# -*- coding: utf-8 -*-
"""Limpeza_tratamento_churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KMdI36XkYld4XAkylJ-z1CeODn3TSVEu

# Meu caderno ❤
**Alura**

Curso Pandas: Limpeza e Tratamendo de dados.

Objetivo: Preparar uma base de dados para ser inserida em modelos de Machine Learning capaz de realizar previsões sobre a taxa de Churn.

### Transformação inicial dos dados

# Entendendo os dados

A base de dados contém colunas além dos ID do cliente e do churn:

**Cliente**:
  * genero: gênero (masculino e feminino)
  * idoso: informação sobre o cliente ter ou não idade superior a 65 anos de idade.
  * parceiro: se o cliente possui ou não parceiro ou parceira.
  * dependentes: se o cliente possui ou não dependentes.
  * tempo_servico: meses de contrato do cliente.

**Serviço de telefonia**:
  * servico_telefone: assinatura do serviço telefonico.
  * varias_linhas: assinatura de mais de uma linha de telefone

**Serviço de internet**:
  * servico_internet: assinatura de um provedor de internet.
  * seguranca_online: assinatura adicional de segurança online.
  * backup_online: Assinatura adicional de backup online
  * protecao_dispositivo: Assinatura adicional de proteção no dispositivo.
  * suporte_tecnico: Assinatura adicional de suporte técnico
  * tv_streaming: Assinatura de TV a cabo
  * filmes_streaming: Assinatura de streaming de filmes

**Conta**
  * contrato: Tipo de contrato
  * faturamento_eletronico: Se o cliente prefere receber online a fatura
  * metodo_pagamento: forma de pagamento.
  * cobranca.mensal: total de todos os serviços do cliente por mês
  * cobranca.Total: total gasto pelo cliente

# Conhecendo os dados

Importando a biblioteca pandas
"""

import pandas as pd

"""Importando dataset e atribuindo a variável "dados_churn"

"""

dados_churn = pd.read_json('/content/drive/MyDrive/Alura Cursos/dataset-telecon.json')

"""Mostrar somente o cabeçalho (5 primeiras linhas)

"""

dados_churn.head()

"""Analisando como os dados estão organizados na coluna "conta" na primeira linha"""

dados_churn['conta'][0]

"""Normalizando coluna "conta" e apresentando as 5 primeiras amostras

"""

pd.json_normalize(dados_churn['conta'].head())

"""
Normalizando a coluna telefone e apresentando as 5 primeiras amostras.

"""

pd.json_normalize(dados_churn['telefone'].head())

"""# Transformando dados em uma tabela

Importando biblioteca Json
"""

import json

"""Abrindo arquivo dataset e atribuindo a variável "json_bruto"
"""

with open("/content/drive/MyDrive/Alura Cursos/dataset-telecon.json") as f:
  json_bruto = json.load(f)

"""Visualizando o arquivo Json"""

json_bruto

"""Normalizando os dados e mostrando 5 primeiras linhas"""

dados_normalizados = pd.json_normalize(json_bruto)
dados_normalizados.head()

"""Analisando informações sobre a tabela"""

dados_normalizados.info()

"""
Detectando erro de tipagem "ValueError: could not convert string to float: ' '"
"""

dados_normalizados['conta.cobranca.Total'] = dados_normalizados['conta.cobranca.Total'].astype('float')

"""# Modificando o tipo da coluna"""

dados_normalizados[dados_normalizados['conta.cobranca.Total']==' '].head()

dados_normalizados[dados_normalizados['conta.cobranca.Total']==' '][
    ['cliente.tempo_servico','conta.contrato','conta.cobranca.mensal','conta.cobranca.Total']
]

idx = dados_normalizados[dados_normalizados['conta.cobranca.Total']==' '].index

"""Solucionando problemas com valores nulos."""

dados_normalizados.loc[idx,'conta.cobranca.Total'] = dados_normalizados.loc[idx,'conta.cobranca.mensal'] * 24

dados_normalizados.loc[idx,'cliente.tempo_servico'] = 24

dados_normalizados.loc[idx][
    ['cliente.tempo_servico','conta.contrato','conta.cobranca.mensal','conta.cobranca.Total']
]

dados_normalizados['conta.cobranca.Total'] = dados_normalizados['conta.cobranca.Total'].astype('float')

dados_normalizados.info()

"""# Identificando e tratando Strings vazias"""

for col in dados_normalizados.columns:
    print(f"Coluna: {col}")
    print(dados_normalizados[col].unique())
    print("-" * 30)

"""Utilizamos uma query para mostrar as linhas onde "churn" tem valores iguais a um espaço vazio"""

dados_normalizados.query("Churn == ''")

"""Fazemos uma cópia da tabela "dados_normalizados" e tranformamos em uma nova tabela "dados_sem_vazio".
Colocamos como parâmetro a tabela dados_normalizados, coluna Churn e os dados diferentes de vazio e copiamos.
"""

dados_sem_vazio = dados_normalizados[dados_normalizados['Churn'] !=''].copy()

"""Verifica se o tipo foi alterado"""

dados_sem_vazio.info()

"""Resetando os index não utilizados"""

dados_sem_vazio.reset_index(drop=True, inplace=True)

"""Resultado da nova tabela"""

dados_sem_vazio

